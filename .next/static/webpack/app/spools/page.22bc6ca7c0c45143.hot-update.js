"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/spools/page",{

/***/ "(app-pages-browser)/./src/lib/services/spools.ts":
/*!************************************!*\
  !*** ./src/lib/services/spools.ts ***!
  \************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   spoolService: () => (/* binding */ spoolService)\n/* harmony export */ });\n/* harmony import */ var _supabase__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../supabase */ \"(app-pages-browser)/./src/lib/supabase.ts\");\n\nconst spoolService = {\n    // Tüm spool'ları getir\n    async getAllSpools () {\n        const { data, error } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from('spools').select(\"\\n        *,\\n        projects!spools_project_id_fkey(name),\\n        profiles!spools_assigned_to_fkey(name)\\n      \").order('created_at', {\n            ascending: false\n        });\n        if (error) {\n            throw new Error(\"Spool'lar getirilemedi: \".concat(error.message));\n        }\n        return data.map((spool)=>{\n            var _spool_projects, _spool_profiles;\n            return {\n                id: spool.id,\n                name: spool.name,\n                projectId: spool.project_id,\n                projectName: ((_spool_projects = spool.projects) === null || _spool_projects === void 0 ? void 0 : _spool_projects.name) || 'Bilinmiyor',\n                status: spool.status,\n                assignedTo: spool.assigned_to,\n                assignedToName: ((_spool_profiles = spool.profiles) === null || _spool_profiles === void 0 ? void 0 : _spool_profiles.name) || 'Atanmamış',\n                quantity: spool.quantity,\n                completedQuantity: spool.completed_quantity,\n                startDate: spool.start_date,\n                endDate: spool.end_date,\n                createdAt: spool.created_at,\n                updatedAt: spool.updated_at\n            };\n        });\n    },\n    // Spool oluştur\n    async createSpool (spool) {\n        const { data, error } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from('spools').insert({\n            name: spool.name,\n            project_id: spool.projectId,\n            status: spool.status,\n            assigned_to: spool.assignedTo,\n            quantity: spool.quantity,\n            completed_quantity: spool.completedQuantity || 0,\n            start_date: spool.startDate,\n            end_date: spool.endDate,\n            description: spool.description\n        }).select().single();\n        if (error) {\n            throw new Error(\"Spool oluşturulamadı: \".concat(error.message));\n        }\n        return {\n            id: data.id,\n            name: data.name,\n            projectId: data.project_id,\n            status: data.status,\n            assignedTo: data.assigned_to,\n            quantity: data.quantity,\n            completedQuantity: data.completed_quantity,\n            startDate: data.start_date,\n            endDate: data.end_date,\n            description: data.description,\n            createdAt: data.created_at,\n            updatedAt: data.updated_at\n        };\n    },\n    // Spool güncelle\n    async updateSpool (id, updates) {\n        const updateData = {};\n        if (updates.name) updateData.name = updates.name;\n        if (updates.projectId) updateData.project_id = updates.projectId;\n        if (updates.status) updateData.status = updates.status;\n        if (updates.assignedTo) updateData.assigned_to = updates.assignedTo;\n        if (updates.quantity) updateData.quantity = updates.quantity;\n        if (updates.completedQuantity !== undefined) updateData.completed_quantity = updates.completedQuantity;\n        if (updates.startDate) updateData.start_date = updates.startDate;\n        if (updates.endDate) updateData.end_date = updates.endDate;\n        if (updates.description !== undefined) updateData.description = updates.description;\n        updateData.updated_at = new Date().toISOString();\n        const { data, error } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from('spools').update(updateData).eq('id', id).select().single();\n        if (error) {\n            throw new Error(\"Spool g\\xfcncellenemedi: \".concat(error.message));\n        }\n        return {\n            id: data.id,\n            name: data.name,\n            projectId: data.project_id,\n            status: data.status,\n            assignedTo: data.assigned_to,\n            quantity: data.quantity,\n            completedQuantity: data.completed_quantity,\n            startDate: data.start_date,\n            endDate: data.end_date,\n            description: data.description,\n            createdAt: data.created_at,\n            updatedAt: data.updated_at\n        };\n    },\n    // Spool sil\n    async deleteSpool (id) {\n        const { error } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from('spools').delete().eq('id', id);\n        if (error) {\n            throw new Error(\"Spool silinemedi: \".concat(error.message));\n        }\n        return true;\n    },\n    // Spool detayını getir\n    async getSpoolById (id) {\n        var _data_projects, _data_profiles;\n        const { data, error } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from('spools').select(\"\\n        *,\\n        projects!spools_project_id_fkey(name),\\n        profiles!spools_assigned_to_fkey(name)\\n      \").eq('id', id).single();\n        if (error) {\n            throw new Error(\"Spool bulunamadı: \".concat(error.message));\n        }\n        return {\n            id: data.id,\n            name: data.name,\n            projectId: data.project_id,\n            projectName: ((_data_projects = data.projects) === null || _data_projects === void 0 ? void 0 : _data_projects.name) || 'Bilinmiyor',\n            status: data.status,\n            assignedTo: data.assigned_to,\n            assignedToName: ((_data_profiles = data.profiles) === null || _data_profiles === void 0 ? void 0 : _data_profiles.name) || 'Atanmamış',\n            quantity: data.quantity,\n            completedQuantity: data.completed_quantity,\n            startDate: data.start_date,\n            endDate: data.end_date,\n            createdAt: data.created_at,\n            updatedAt: data.updated_at\n        };\n    },\n    // Proje bazlı spool'lar getir\n    async getSpoolsByProject (projectId) {\n        const { data, error } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from('spools').select(\"\\n        *,\\n        profiles!spools_assigned_to_fkey(name)\\n      \").eq('project_id', projectId).order('created_at', {\n            ascending: false\n        });\n        if (error) {\n            throw new Error(\"Proje spool'ları getirilemedi: \".concat(error.message));\n        }\n        return data.map((spool)=>{\n            var _spool_profiles;\n            return {\n                id: spool.id,\n                name: spool.name,\n                projectId: spool.project_id,\n                status: spool.status,\n                assignedTo: spool.assigned_to,\n                assignedToName: ((_spool_profiles = spool.profiles) === null || _spool_profiles === void 0 ? void 0 : _spool_profiles.name) || 'Atanmamış',\n                quantity: spool.quantity,\n                completedQuantity: spool.completed_quantity,\n                startDate: spool.start_date,\n                endDate: spool.end_date,\n                createdAt: spool.created_at,\n                updatedAt: spool.updated_at\n            };\n        });\n    },\n    // Durum bazlı spool'lar getir\n    async getSpoolsByStatus (status) {\n        const { data, error } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from('spools').select(\"\\n        *,\\n        projects!spools_project_id_fkey(name),\\n        profiles!spools_assigned_to_fkey(name)\\n      \").eq('status', status).order('created_at', {\n            ascending: false\n        });\n        if (error) {\n            throw new Error(\"Durum bazlı spool'lar getirilemedi: \".concat(error.message));\n        }\n        return data.map((spool)=>{\n            var _spool_projects, _spool_profiles;\n            return {\n                id: spool.id,\n                name: spool.name,\n                projectId: spool.project_id,\n                projectName: ((_spool_projects = spool.projects) === null || _spool_projects === void 0 ? void 0 : _spool_projects.name) || 'Bilinmiyor',\n                status: spool.status,\n                assignedTo: spool.assigned_to,\n                assignedToName: ((_spool_profiles = spool.profiles) === null || _spool_profiles === void 0 ? void 0 : _spool_profiles.name) || 'Atanmamış',\n                quantity: spool.quantity,\n                completedQuantity: spool.completed_quantity,\n                startDate: spool.start_date,\n                endDate: spool.end_date,\n                createdAt: spool.created_at,\n                updatedAt: spool.updated_at\n            };\n        });\n    },\n    // İlerleme güncelle\n    async updateProgress (id, completedQuantity) {\n        const { data, error } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from('spools').update({\n            completed_quantity: completedQuantity,\n            status: completedQuantity >= (await this.getSpoolById(id)).quantity ? 'completed' : 'active',\n            updated_at: new Date().toISOString()\n        }).eq('id', id).select().single();\n        if (error) {\n            throw new Error(\"İlerleme g\\xfcncellenemedi: \".concat(error.message));\n        }\n        return {\n            id: data.id,\n            name: data.name,\n            projectId: data.project_id,\n            status: data.status,\n            assignedTo: data.assigned_to,\n            quantity: data.quantity,\n            completedQuantity: data.completed_quantity,\n            startDate: data.start_date,\n            endDate: data.end_date,\n            createdAt: data.created_at,\n            updatedAt: data.updated_at\n        };\n    }\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/lib/services/spools.ts\n"));

/***/ })

});